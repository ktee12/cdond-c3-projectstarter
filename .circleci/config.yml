version: 2.1

orbs:  
  slack: circleci/slack@4.1

# The parameter declaration because of smoke test.
parameters:
  workflow_id:
    type: string 
    default: '${CIRCLE_WORKFLOW_ID}'
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string 
        # default: ${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive 
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here    
      workflow_id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
             cd ~/project/backend
             npm install
             npm run build 
             npm run migration:revert
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test          
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test      
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Analyse frontend 
          command: | 
            cd frontend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Analyse backend 
          command: | 
            cd backend 
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical            
      - slack/notify:
          # color: "#f4426e"
          mentions: "@DevOpsTeam"
          # message: The scan failed
          event: fail 
          template: basic_fail_1 
      - slack/notify:
          # color: "#42e2f4"
          mentions: "@DevOpsTeam"
          # message: Successful
          event: pass
          template: success_tagged_deploy_1 

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli 
    steps:
      # Checkout code from git
      - checkout 
      - run: yum install -y tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=your-tag \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure:
    docker:
      - image: python:3.7-alphine3.16
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'f3:37:30:b3:9b:31:9f:20:b7:a0:c3:c6:35:10:ea:b8'        
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli 
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |     
            # add environment variables to server 
            echo ENVIRONMENT=production > backend/.env 
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env  
            cat backend/.env
            cd .circleci/ansible  # Your code here
            ansible-playbook -i inventory.txt configure-server.yml 
      - persist_to_workspace:
          root: ~/
          # paths: [project/backend]   
          paths:
            - project/backend         
      # Here's where you will add some code to rollback on failure  
      # destroy environment     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      - run: 
          name: Install dependencies 
          command: | 
            # apk add --update --no-cache tar gzip nodejs npm aws-cli curl 
            sudo apt install -y tar gzip curl 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install 
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend 
            # npm install 
            # npm audit fix --audit-level=critical --force 
            # npm run build 
            npm run migrations >> migrations.txt 
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then 
              curl --insecure https://kvdb.io/MuB7VJdoY7NMiLhX676W9p/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
     # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alphine3.16
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm aws-cli 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env 
            cat frontend/.env      
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install             
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alphine3.16
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout 
      - add_ssh_keys:
          fingerprints:
            - 'f3:37:30:b3:9b:31:9f:20:b7:a0:c3:c6:35:10:ea:b8'
      
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible       
      - restore_cache: 
          keys: [backend-build]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend 
            npm install 
            npm run build 
            cd .. 
            tar -C backend -czvf artifact.tar.gz . 
            mkdir -p ~/project/.circleci/roles/deploy/files/
            mv artifact.tar.gz .circleci/roles/deploy/files/artifact.tar.gz 
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml 
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alphine3.16
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache curl aws-cli
      # - attach_workspace:
      #     at: ~/ 
      - run:
          name: Backend smoke test 
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "{API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok" 
            # if curl -s http://google.com 
            then 
                return 0
            else 
                return 1 
            fi
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            # export BACKEND_IP=$(tail ~/project/.circleci/ansible/inventory.txt)
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-1.amazonaws.com/#/employees"
            echo $URL
            if curl ${URL} | grep "Welcome"; then return 0; else return 1; fi
            # then 
            #   # Change this to 0 after the job fails 
            #   return 0
            # else
            #   return 1
            # fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

# Smoke test fail check.
# 1) From the terminal 
# ssh -i /f/NotSynced/Downloads/udacity.pem ubuntu@<IP>
# sudo pm2 logs 
# ls -al -> no .env file 
# sudo pm2 status



  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here
            # yum install tar gzip npm nodejs -y --enablerepo=epel 
            sudo apt install -y tar gzip curl 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install 
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\'WorkflowID\'].Value" \
            --no-paginate --output text)
            aws cloudformation deploy \ 
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \ 
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople 
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=<<pipeline.parameters.workflow_id>>
            export STACKS=$(aws cloudformation list-exports \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # After everything has passed, create branch and build from there.
      #     filters:
      #       branches:
      #         only: [dev-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]